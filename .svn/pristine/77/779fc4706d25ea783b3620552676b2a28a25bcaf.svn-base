/*
This file is part of Cut Micro.

Cut Micro is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Cut Micro is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Cut Micro. If not, see http://www.gnu.org/licenses/.
*/
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml.Serialization;
using System.Xml;
using CPanel;

namespace CutMicro
{
    [Serializable]
    public class filesave
    {
        public bool Started;
        public PL[] Tpanels;
        public DT[] Tdetails;
        public PL[] Wpanels;
        public DT[] Wdetails;
        public int sawSize;
    }
    
    class FileSaveLoad
    {
        string comment1 = "<!-- File created by "+Program.Productname+" -->";
        string comment2 = "<!-- Please do not edit this file manually -->";
        /// <summary>
        /// Saves project to xml
        /// </summary>
        /// <param name="filename">File to save</param>
        /// <param name="Tpanels">Panels list from table</param>
        /// <param name="Tdetails">Details List from table</param>
        /// <param name="Wpanels">Panels luist from workarea ot null</param>
        /// <param name="Wdetails">Details luist from workarea ot null</param>
        /// <param name="sawSize"></param>
        public void saveProj(string filename, PL[] Tpanels, DT[] Tdetails, List<CutPanel> Wpanels, List<Detail> Wdetails, int sawSize)
        {
            XmlSerializer XS = new XmlSerializer(typeof(filesave));
           // if (File.Exists(filename)) { File.Delete(filename);}
            TextWriter F = new StreamWriter(filename, false, Encoding.UTF8);
            F.WriteLine(comment1); F.WriteLine(comment2);
            filesave fileSave = new filesave();
            if (Wpanels == null || Wdetails == null)
            {
                fileSave.Started = false;
                fileSave.Wpanels = null;
                fileSave.Wdetails = null;
            }
            else
            {
                fileSave.Started = true;
                List<PL> plist = new List<PL>();
                foreach (CutPanel p in Wpanels)
                {
                    plist.Add(p.ExportToPL());
                }
                fileSave.Wpanels = plist.ToArray();
                List<DT> dlist = new List<DT>();
                foreach (Detail p in Wdetails)
                {
                    dlist.Add(p.ExportToDT());
                }
                fileSave.Wdetails = dlist.ToArray();
            }

            fileSave.Tdetails = Tdetails;
            fileSave.Tpanels = Tpanels;
            fileSave.sawSize = sawSize;
            XS.Serialize(F, fileSave);
            F.Close();
            F.Dispose();
        }    

        public void loadFile(string filename, out List<CutPanel> panels, out List<Detail> details, out int sawSize, out bool panelIsCreated, out DT[] _details, out PL[] _panels)
        {
            XmlSerializer XS = new XmlSerializer(typeof(filesave));
            TextReader F = new StreamReader(filename, Encoding.UTF8);
            F.ReadLine(); F.ReadLine();
            filesave S = (filesave)XS.Deserialize(F);

            details = new List<Detail>();
            panels = new List<CutPanel>();
            SawSize.S = S.sawSize;
            if (S.Started)
            {
                foreach (DT det in S.Wdetails)
                {
                    details.Add(new Detail(det));
                }                
                foreach (PL pan in S.Wpanels)
                {
                    panels.Add(new CutPanel(pan));
                }
            }
            _details = S.Tdetails;
            _panels = S.Tpanels;
            panelIsCreated = S.Started;
            sawSize = S.sawSize;
            F.Close();
            F.Dispose();
        } 
    }
}
